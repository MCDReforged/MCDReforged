
msgid ""
msgstr ""
"Project-Id-Version:  mcdreforged\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-20 17:18+0800\n"
"PO-Revision-Date: 2021-01-23 19:44+0800\n"
"Last-Translator: Alex3236 <alex3236@qq.com>\n"
"Language: zh_CN\n"
"Language-Team: Chinese Simplified\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../customize/handler.rst:3
msgid "Server Handler"
msgstr "服务端处理器"

#: ../customize/handler.rst:5
msgid ""
"Server handler is the object which parses server output and provides "
"command interfaces to control the server"
msgstr "服务端处理器是分析服务器输出并提供命令接口来控制服务器的对象"

#: ../customize/handler.rst:7
msgid ""
"MCDR itself has already includes a number of server handlers for widely-"
"used Minecraft related servers, but in case you have a server with custom"
" output format, you can write you own server handler, and assign MCDR to "
"use it."
msgstr ""
"MCDR 本身已经包含许多广泛使用的 Minecraft 服务端的处理器，但如果你有需要自定义输出格式的服务端，你可以编写自己的服务端处理器，并让"
" MCDR 使用它"

#: ../customize/handler.rst:9
msgid ""
"To design a server handler, you need to inherit from an existed server "
"handler class, or the base class "
":class:`~mcdreforged.handler.impl.abstract_minecraft_handler.AbstractMinecraftHandler`"
msgstr ""
"要设计服务端处理器，你需要从现有的服务端处理器类或 "
":class:`~mcdreforged.handler.impl.abstract_minecraft_handler.AbstractMinecraftHandler`"
" 基类继承"

#: ../customize/handler.rst:11
msgid ""
"It's recommend to firstly have a look at the implementation of the server"
" handlers in MCDR first and try to understand them"
msgstr "建议首先查看 MCDR 中服务端处理器的实现，并尝试理解它们"

#: ../customize/handler.rst:13
msgid ""
"For easier use and distribution, it is recommended to provide server "
"handlers by creating a :ref:`plugin_dev/basic:MCDR Plugin`."
msgstr "为了更方便的使用和分发，建议通过创建 :ref:`plugin_dev/basic:MCDR Plugin` 来提供服务端处理器"

#: ../customize/handler.rst:16
msgid "Example"
msgstr "示例"

#: ../customize/handler.rst:18
msgid ""
"In this example, we have a vanilla server, but some of the players have a"
" prefix on their username, which result in some changes to the message "
"format of the player chat message. For Example, A player with id "
"``Steve`` and prefix ``[Builder]`` might have following chat messages:"
msgstr ""
"假设我们有一个原版服务器，但某些玩家的用户名加有前缀，这将导致玩家聊天消息的消息格式发生一些更改。例如，具有 ID ``Steve`` 和前缀 "
"``[Builder]`` 的玩家可能有以下聊天消息："

#: ../customize/handler.rst:25
msgid ""
"For the default vanilla handler, ``[Builder]Steve`` is an illegal player "
"name. Luckily all possible prefixes of the players in the server follows "
"the same format ``[Prefix]PlayerName``. So it's possible to make a "
"dedicated handler for the server"
msgstr ""
"对于默认的原版服务端处理器，``[Builder]Steve`` 是一个非法的玩家名称。幸运的是，服务器中所有可能的玩家前缀都遵循相同的格式，即 "
"``[前缀]玩家名称``。因此，可以为之创建专用的处理器"

#: ../customize/handler.rst:27
msgid ""
"For example, we create a MCDR plugin and write the following codes as its"
" entrypoint, which creates and registers a handler to handle player names"
" in this server correctly"
msgstr "例如，我们创建一个 MCDR 插件，并编写以下代码作为其入口点，以在此服务器中正确处理玩家名称："

#: ../customize/handler.rst:53
msgid "Then we can start using the handler:"
msgstr "然后，我们可以开始使用这个处理器："

#: ../customize/handler.rst:56
msgid "Load or reload the plugin you've just created"
msgstr "加载或重载你刚刚创建的插件"

#: ../customize/handler.rst:57
msgid ""
"Set the :ref:`configuration:handler` option to what method ``get_name()``"
" of your handler returns, e.g.:"
msgstr ""
"把 :ref:`configuration:handler` 选项设置为自定义处理器 ``get_name()`` 方法的返回值，如："

#: ../customize/handler.rst:63
msgid "That's all you need to do"
msgstr "以上"
