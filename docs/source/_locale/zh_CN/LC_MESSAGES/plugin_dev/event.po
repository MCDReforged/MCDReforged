
msgid ""
msgstr ""
"Project-Id-Version:  mcdreforged\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-14 21:26+0800\n"
"PO-Revision-Date: 2021-01-23 12:20+0800\n"
"Last-Translator: Alex3236 <alex3236@qq.com>\n"
"Language: zh_CN\n"
"Language-Team: Chinese Simplified\n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../plugin_dev/event.rst:3
msgid "Plugin Event"
msgstr "插件事件"

#: ../plugin_dev/event.rst:5
msgid ""
"Plugin events are the most important way for plugins to interact with the"
" server and the console"
msgstr "插件事件是插件与控制台和服务器交互的重要方式"

#: ../plugin_dev/event.rst:7
msgid ""
"When the server has trigger a specific event, it will list out all event "
"listeners that have registered to this event, then MCDR will invoke the "
"callback function of the listener with the given arguments"
msgstr "当服务器触发某一事件时，MCDR 会以触发的参数传递至注册该事件的事件监听器，然后调用该监听器的回调函数"

#: ../plugin_dev/event.rst:10
msgid ""
"Event Listeners have a priority value. The default priority is ``1000``. "
"Plugins can specify the priority when they register an event listener "
"manually. MCDR will execute event listeners in ascending order according "
"to the priority"
msgstr "事件监听器是具有优先级的，默认优先级为 ``1000``，插件可以在手动注册事件监听器时设置优先级，MCDR会根据优先级按升序来执行事件监听器"

#: ../plugin_dev/event.rst:15
msgid "Register a event listener"
msgstr "注册事件监听器"

#: ../plugin_dev/event.rst:17
msgid ""
"See :ref:`plugin_dev/basic:Event listeners` section in "
":doc:`/plugin_dev/basic` document"
msgstr "见 :doc:`/plugin_dev/basic` 文档中的 :ref:`plugin_dev/basic:Event listeners` 章节"

#: ../plugin_dev/event.rst:20
msgid "MCDR Event"
msgstr "MCDR 事件"

#: ../plugin_dev/event.rst:23
msgid "Default Event Listener"
msgstr "默认的事件监听器"

#: ../plugin_dev/event.rst:25
msgid ""
"All of the MCDR events have an attribute called \"Default function "
"name\". If your plugin declare a function in the global slope of the "
"plugin file, with the same name to the \"Default function name\", the "
"function will be automatically registered as a listener to the specific "
"event."
msgstr ""
"所有的 MCDR 事件监听器都有一个 "
"“默认函数名称”。当你在插件文件内创建一个函数名称与“默认函数名称”相同的函数时，该函数会自动注册为相应的事件监听器"

#: ../plugin_dev/event.rst:30
msgid ""
"The priority of these event listeners are always the default priority "
"(``1000``)"
msgstr "这些事件监听器的优先级始终是默认的优先级（``1000``）"

#: ../plugin_dev/event.rst:33
msgid "MCDR Event List"
msgstr "MCDR 事件列表"

#: ../plugin_dev/event.rst:35
msgid "To help understand, some MCDR events can be sorted into 3 lifecycle flows:"
msgstr "为了助于理解，一些 MCDR 的事件可被划分为三个生命周期流程"

#: ../plugin_dev/event.rst:37
msgid ""
"Plugin lifecycle: :ref:`plugin_dev/event:Plugin Loaded` -> "
":ref:`plugin_dev/event:Plugin Unloaded`"
msgstr ""
"插件生命周期：:ref:`plugin_dev/event:Plugin Loaded` -> "
":ref:`plugin_dev/event:Plugin Unloaded`"

#: ../plugin_dev/event.rst:38
msgid ""
"Server lifecycle: :ref:`plugin_dev/event:Server Start` -> "
":ref:`plugin_dev/event:Server Startup` -> :ref:`plugin_dev/event:Server "
"Stop`"
msgstr ""
"服务端生命周期：:ref:`plugin_dev/event:Server Start` -> "
":ref:`plugin_dev/event:Server Startup` -> :ref:`plugin_dev/event:Server "
"Stop`"

#: ../plugin_dev/event.rst:39
msgid ""
"MCDR lifecycle: :ref:`plugin_dev/event:MCDR Start` -> "
":ref:`plugin_dev/event:MCDR Stop`"
msgstr ""
"MCDR 生命周期：:ref:`plugin_dev/event:MCDR Start` -> "
":ref:`plugin_dev/event:MCDR Stop`"

#: ../plugin_dev/event.rst:44
msgid "Plugin Loaded"
msgstr "插件被加载"

#: ../plugin_dev/event.rst:46
msgid ""
"Plugin load event gets triggered once when a plugin is loaded. Plugins "
"are supposed to register some event listeners, commands and help messages"
" as well as initialize their fields here"
msgstr "插件被加载事件将在插件加载后被触发一次，若你需要注册一些事件监听器/命令/帮助消息，以及初始化参数，那么你应该将它们置于这个函数里"

#: ../plugin_dev/event.rst:56
msgid ""
"If it's a plugin reload, ``prev_module`` argument indicates the previous "
"plugin instance module, otherwise if it's the first time to load the "
"plugin, prev_module is None. With this parameter plugin can easily "
"inherit information from the previous plugin instance. Here's an example:"
msgstr ""
"插件重载时，``prev_module`` 参数会代表之前的插件模块实例。若第一次加载插件，则 ``prev_module`` 为 "
"None。你使用该参数时，可让插件继承以前的插件实例中的内容，例如："

#: ../plugin_dev/event.rst:70
msgid ""
"Since it's the first event in the lifecycle of a plugin, this event can "
"only be registered with default event listener, so the ``on_load`` "
"function is the entry spot of your plugin"
msgstr "由于它是插件生命周期中的第一个事件，因此只能使用默认事件侦听器注册该事件，因此 ``on_load`` 函数是插件的入口点"

#: ../plugin_dev/event.rst:73
msgid ""
"Note: You should not dispatch custom events in the ``on_load`` function "
"or it will do nothing. The event listener storage of MCDR has not been "
"initialized yet"
msgstr "注意：你不应该在 ``on_load`` 函数中分发自定义事件，否则它将无效。MCDR的事件侦听器存储此时尚未初始化"

#: ../plugin_dev/event.rst
msgid "Event id"
msgstr "事件 ID"

#: ../plugin_dev/event.rst:76
msgid "``mcdr.plugin_loaded``"
msgstr "``mcdr.plugin_loaded``"

#: ../plugin_dev/event.rst
msgid "Callback arguments"
msgstr "回调参数"

#: ../plugin_dev/event.rst:77
msgid ""
":class:`~mcdreforged.plugin.si.plugin_server_interface.PluginServerInterface`, "
":class:`Any` (previous module)"
msgstr ""
":class:`~mcdreforged.plugin.si.plugin_server_interface.PluginServerInterface`, "
":class:`Any` (之前的模块)"

#: ../plugin_dev/event.rst
msgid "Default function name"
msgstr "默认函数名称"

#: ../plugin_dev/event.rst:78
msgid "``on_load``"
msgstr "``on_load``"

#: ../plugin_dev/event.rst:83
msgid "Plugin Unloaded"
msgstr "插件被卸载"

#: ../plugin_dev/event.rst:85
msgid ""
"This event gets dispatched when MCDR unload the plugin instance. It can "
"be caused by a plugin reload or a plugin unload"
msgstr "当 MCDR 卸载插件实例时，将派发该事件。这可能是由插件重载或卸载引起的"

#: ../plugin_dev/event.rst:87
msgid ""
"Also, this event will be dispatched during MCDR stopping, so it's a good "
"place for you to do some cleanup"
msgstr "除此之外，在 MCDR 关闭过程中，该事件也将被派发，因此这非常适合用于执行清理操作"

#: ../plugin_dev/event.rst:89
msgid "``mcdr.plugin_unloaded``"
msgstr "``mcdr.plugin_unloaded``"

#: ../plugin_dev/event.rst:90 ../plugin_dev/event.rst:150
#: ../plugin_dev/event.rst:162 ../plugin_dev/event.rst:196
#: ../plugin_dev/event.rst:212
msgid ":class:`~mcdreforged.plugin.si.plugin_server_interface.PluginServerInterface`"
msgstr ""

#: ../plugin_dev/event.rst:91
msgid "``on_unload``"
msgstr "``on_unload``"

#: ../plugin_dev/event.rst:96
msgid "General Info"
msgstr "标准信息"

#: ../plugin_dev/event.rst:98
msgid ""
"A new line of text is output from the stdout of the server, or a text is "
"input from the console. MCDR has already parsed the text into an "
":class:`~mcdreforged.info_reactor.info.Info` object. In this event plugin"
" can response to the info"
msgstr ""
"服务器输出新一行文本，或者从控制台中输入文本时，触发此事件。MCDR 将把文本解析为 "
":class:`~mcdreforged.info_reactor.info.Info` 对象。在这种情况下，插件可以响应信息"

#: ../plugin_dev/event.rst:101 ../plugin_dev/event.rst:124
msgid "Here's an example"
msgstr "以下是一个示例用法："

#: ../plugin_dev/event.rst:110
msgid "``mcdr.general_info``"
msgstr "``mcdr.general_info``"

#: ../plugin_dev/event.rst:111 ../plugin_dev/event.rst:138
msgid ""
":class:`~mcdreforged.plugin.si.plugin_server_interface.PluginServerInterface`, "
":class:`~mcdreforged.info_reactor.info.Info`"
msgstr ""
":class:`~mcdreforged.plugin.si.plugin_server_interface.PluginServerInterface`, "
":class:`~mcdreforged.info_reactor.info.Info`"

#: ../plugin_dev/event.rst:112
msgid "``on_info``"
msgstr "``on_info``"

#: ../plugin_dev/event.rst:117
msgid "User Info"
msgstr "用户信息"

#: ../plugin_dev/event.rst:119
msgid ""
"User Info event is very similar to General Info event, but it only gets "
"triggered when the info is sent by a user, more precisely, "
":meth:`info.is_user<mcdreforged.info_reactor.info.Info.is_user>` is "
"``True``"
msgstr ""
"*用户信息* 事件与 *标准信息* "
"事件非常相似，但仅在用户发送信息时——更准确地说，:meth:`info.is_user<mcdreforged.info_reactor.info.Info.is_user>`"
" 为 ``True`` 时——才会触发"

#: ../plugin_dev/event.rst:122
msgid "If you want a simple way to handle user input, you can use this event"
msgstr "如果你需要一种简单的方式来处理用户输入，则可以使用此事件"

#: ../plugin_dev/event.rst:133
msgid ""
"If you want to have a not-simple command system, rather than parsing them"
" manually in User Info event, I will suggest you to register a command "
"tree for you plugin. See the :ref:`command registering "
"<plugin_dev/basic:command>` doc"
msgstr ""
"如果你想要更复杂的命令系统，而不是在用户信息事件中手动解析它们，则建议你为插件注册一个命令树。参见插件的 :ref:`命令注册 "
"<plugin_dev/basic:command>` 文档"

#: ../plugin_dev/event.rst:137
msgid "``mcdr.user_info``"
msgstr "``mcdr.user_info``"

#: ../plugin_dev/event.rst:139
msgid "``on_user_info``"
msgstr "``on_user_info``"

#: ../plugin_dev/event.rst:144
msgid "Server Start"
msgstr "服务端启动"

#: ../plugin_dev/event.rst:146
msgid "The server process is just started by MCDR"
msgstr "服务端进程刚被 MCDR 启动时触发"

#: ../plugin_dev/event.rst:149
msgid "``mcdr.server_start``"
msgstr "``mcdr.server_start``"

#: ../plugin_dev/event.rst:151
msgid "``on_server_start``"
msgstr "``on_server_start``"

#: ../plugin_dev/event.rst:156
msgid "Server Startup"
msgstr "服务端启动完成"

#: ../plugin_dev/event.rst:158
msgid ""
"The server has fully started up. For example, a vanilla Minecraft server "
"outputs ``Done (1.0s)! For help, type \"help\"``"
msgstr ""
"服务器已完全启动时——例如，原版 Minecraft 服务器输出 ``Done (1.0s)! For help, type \"help\"``"
" 时——被触发"

#: ../plugin_dev/event.rst:161
msgid "``mcdr.server_startup``"
msgstr "``mcdr.server_startup``"

#: ../plugin_dev/event.rst:163
msgid "``on_server_startup``"
msgstr "``on_server_startup``"

#: ../plugin_dev/event.rst:168
msgid "Server Stop"
msgstr "服务端终止"

#: ../plugin_dev/event.rst:170
msgid ""
"The server process stops. You can do something depends on the process "
"return code"
msgstr "服务端进程终止。你可以通过判断进程的返回码执行不同操作"

#: ../plugin_dev/event.rst:172 ../plugin_dev/event.rst:206
msgid ""
"MCDR will wait until all events finished their callbacks to continue "
"executing"
msgstr "MCDR 将等待所有派发的事件触发的回调函数运行完成，再继续运行下去"

#: ../plugin_dev/event.rst:174 ../plugin_dev/event.rst:222
msgid "Example:"
msgstr "例如："

#: ../plugin_dev/event.rst:183
msgid "``mcdr.server_stop``"
msgstr "``mcdr.server_stop``"

#: ../plugin_dev/event.rst:184
msgid ""
":class:`~mcdreforged.plugin.si.plugin_server_interface.PluginServerInterface`, "
":class:`int`"
msgstr ""
":class:`~mcdreforged.plugin.si.plugin_server_interface.PluginServerInterface`, "
":class:`int`"

#: ../plugin_dev/event.rst:185
msgid "``on_server_stop``"
msgstr "``on_server_stop``"

#: ../plugin_dev/event.rst:190
msgid "MCDR Start"
msgstr "MCDR 启动"

#: ../plugin_dev/event.rst:192
msgid ""
"The MCDR is starting. Only plugins which is loaded with MCDR is able to "
"receive this event"
msgstr "MCDR 正在启动。只有成功加载的插件才能接收此事件"

#: ../plugin_dev/event.rst:195
msgid "``mcdr.mcdr_start``"
msgstr "``mcdr.mcdr_start``"

#: ../plugin_dev/event.rst:197
msgid "``on_mcdr_start``"
msgstr "``on_mcdr_start``"

#: ../plugin_dev/event.rst:202
msgid "MCDR Stop"
msgstr "MCDR 终止"

#: ../plugin_dev/event.rst:204
msgid "The MCDR is stopping. Time to do some clean up"
msgstr "MCDR 正在关闭，该做一些清理工作了"

#: ../plugin_dev/event.rst:208
msgid ""
"Watchdog is disabled during this event dispatching, so you can safely "
"block MCDR here to wait until your cleanup codes finishes"
msgstr "Watchdog 在这个过程中将会被临时禁用，因此你可以放心地在这里阻塞 MCDR 至你的清理操作结束"

#: ../plugin_dev/event.rst:211
msgid "``mcdr.mcdr_stop``"
msgstr "``mcdr.mcdr_stop``"

#: ../plugin_dev/event.rst:213
msgid "``on_mcdr_stop``"
msgstr "``on_mcdr_stop``"

#: ../plugin_dev/event.rst:218
msgid "Player Joined"
msgstr "玩家加入"

#: ../plugin_dev/event.rst:220
msgid ""
"A player just joined the game. MCDR only parses the name of the player to"
" a string, plugin can use the info instance for more custom information "
"parsing"
msgstr "一名玩家加入了游戏。MCDR 仅将玩家的名称解析为字符串，插件可以使用返回的 ``Info`` 实例进行更多自定义信息解析"

#: ../plugin_dev/event.rst:230
msgid "``mcdr.player_joined``"
msgstr "``mcdr.player_joined``"

#: ../plugin_dev/event.rst:231
msgid ""
":class:`~mcdreforged.plugin.si.plugin_server_interface.PluginServerInterface`, "
":class:`str`, :class:`~mcdreforged.info_reactor.info.Info`"
msgstr ""
":class:`~mcdreforged.plugin.si.plugin_server_interface.PluginServerInterface`, "
":class:`str`, :class:`~mcdreforged.info_reactor.info.Info`"

#: ../plugin_dev/event.rst:232
msgid "``on_player_joined``"
msgstr "``on_player_joined``"

#: ../plugin_dev/event.rst:237
msgid "Player Left"
msgstr "玩家离开"

#: ../plugin_dev/event.rst:239
msgid ""
"A player just left the game. Plugin can do cleanups for player related "
"objects"
msgstr "一名玩家离开了游戏。插件可以清理与玩家相关的对象"

#: ../plugin_dev/event.rst:242
msgid "``mcdr.player_left``"
msgstr "``mcdr.player_left``"

#: ../plugin_dev/event.rst:243
msgid ""
":class:`~mcdreforged.plugin.si.plugin_server_interface.PluginServerInterface`, "
":class:`str`"
msgstr ""
":class:`~mcdreforged.plugin.si.plugin_server_interface.PluginServerInterface`, "
":class:`str`"

#: ../plugin_dev/event.rst:244
msgid "``on_player_left``"
msgstr "``on_player_left``"

#: ../plugin_dev/event.rst:247
msgid "Custom Event"
msgstr "自定义事件"

#: ../plugin_dev/event.rst:249
msgid ""
"Besides MCDR itself, plugins can also dispatch its own event. All you "
"need to do is invoking "
":meth:`ServerInterface.dispatch_event<mcdreforged.plugin.si.server_interface.ServerInterface.dispatch_event>`"
" api with the event and some arguments"
msgstr ""
"除了 MCDR 本身，插件还可以分发自己的事件。你需要做的就是调用带有事件和一些参数的 "
":meth:`ServerInterface.dispatch_event<mcdreforged.plugin.si.server_interface.ServerInterface.dispatch_event>`"
" API"

#: ../plugin_dev/event.rst:252
msgid ""
"Customizing event is a good way to broadcast a message between plugins. "
"It's also a good indirectly way for your plugin to react to requests from"
" other plugins"
msgstr "自定义事件是在插件之间传递消息的好办法。这也是一种不错的间接让插件响应其他插件请求的方式"
