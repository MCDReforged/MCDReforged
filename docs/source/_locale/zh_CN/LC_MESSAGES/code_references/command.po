
msgid ""
msgstr ""
"Project-Id-Version:  mcdreforged\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-06-29 19:50+0800\n"
"PO-Revision-Date: 2021-01-23 17:24+0800\n"
"Last-Translator: Alex3236 <alex3236@qq.com>\n"
"Language: zh_CN\n"
"Language-Team: Chinese Simplified\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../code_references/command.rst:5
msgid "Command Stuffs"
msgstr "指令相关"

#: ../code_references/command.rst:7
msgid ":doc:`API package </plugin_dev/api>` path: ``mcdreforged.api.command``"
msgstr ":doc:`API  包 </plugin_dev/api>` 路径: ``mcdreforged.api.command``"

#: ../code_references/command.rst:11
msgid "Command Source"
msgstr "指令源"

#: mcdreforged.command.builder.nodes.basic.AbstractNode:1
#: mcdreforged.command.command_source.CommandSource:1 of
msgid "Bases: :py:class:`~abc.ABC`"
msgstr ""

#: mcdreforged.command.command_source.CommandSource:1 of
msgid ""
":class:`CommandSource`: is an abstracted command executor model. It "
"provides several methods for command execution"
msgstr ":class:`CommandSource` 是一个指令执行源的抽象模型。它提供了若干有助于指令执行的方法"

#: mcdreforged.command.builder.exception.CommandErrorBase:3
#: mcdreforged.command.command_source.CommandSource:3 of
msgid "Class inheriting tree::"
msgstr "类继承树状图"

#: mcdreforged.command.command_source.CommandSource:11 of
msgid ""
"Plugins can declare a class inherited from :class:`CommandSource` to "
"create their own command source"
msgstr "插件可以定义一个由 :class:`CommandSource` 继承而来的类来自定义自己的指令源"

#: mcdreforged.command.command_source.CommandSource.is_player:1 of
msgid "If the command source is a player command source"
msgstr "指令源是否为玩家"

#: mcdreforged.command.builder.command_builder_utils.get_float
#: mcdreforged.command.builder.command_builder_utils.get_int
#: mcdreforged.command.builder.exception.CommandError.get_error_segment
#: mcdreforged.command.builder.exception.CommandError.get_failed_command
#: mcdreforged.command.builder.exception.CommandError.get_parsed_command
#: mcdreforged.command.builder.tools.SimpleCommandBuilder.arg
#: mcdreforged.command.builder.tools.SimpleCommandBuilder.build
#: mcdreforged.command.builder.tools.SimpleCommandBuilder.literal
#: mcdreforged.command.command_source.CommandSource.has_permission
#: mcdreforged.command.command_source.CommandSource.has_permission_higher_than
#: mcdreforged.command.command_source.CommandSource.is_console
#: mcdreforged.command.command_source.CommandSource.is_player of
msgid "Returns"
msgstr "返回"

#: mcdreforged.command.command_source.CommandSource.is_player:3 of
msgid "``True`` if it's a player command source, ``False`` otherwise"
msgstr "若指令源为玩家，则返回 ``True``，否则返回 ``False``"

#: mcdreforged.command.command_source.CommandSource.is_console:1 of
msgid "If the command source is a console command source"
msgstr "指令源是否为控制台"

#: mcdreforged.command.command_source.CommandSource.is_console:3 of
msgid "``True`` if it's a console command source, ``False`` otherwise"
msgstr "若指令源为控制台，则返回 ``True``，否则返回 ``False``"

#: mcdreforged.command.command_source.CommandSource.get_server:1 of
msgid "Return the server interface instance"
msgstr "返回 ServerInterface 实例"

#: mcdreforged.command.command_source.CommandSource.get_permission_level:1 of
msgid "Return the permission level that the command source has"
msgstr "返回指令源拥有的的权限等级"

#: mcdreforged.command.command_source.CommandSource.get_permission_level:3 of
msgid "The permission level is represented by int"
msgstr "权限等级使用 int 表示"

#: mcdreforged.command.command_source.CommandSource.get_preference:1 of
msgid "Return the preference of the command source"
msgstr "返回此指令源的偏好"

#: mcdreforged.command.command_source.CommandSource.get_preference:3 of
msgid ""
"By default, the default preference of MCDR from "
":meth:`ServerInterface.get_default_preference() "
"<mcdreforged.plugin.si.server_interface.ServerInterface.get_preference>` "
"will be returned"
msgstr ""
"在默认情况下，该方法将返回 MCDR 默认的偏好设置。见方法 "
":meth:`ServerInterface.get_default_preference() "
"<mcdreforged.plugin.si.server_interface.ServerInterface.get_preference>`"

#: mcdreforged.command.command_source.CommandSource.get_preference:7 of
msgid ""
"Subclasses might override this method to return customized preference. "
"e.g. :class:`PlayerCommandSource` will return the preference of the "
"corresponding player"
msgstr "子类可能会重写这个方法，以返回自定义的偏好。比如，:class:`PlayerCommandSource` 的该方法将返回对应玩家的偏好"

#: mcdreforged.command.command_source.CommandSource.get_preference:12 of
msgid ""
"method :meth:`ServerInterface.get_preference() "
"<mcdreforged.plugin.si.server_interface.ServerInterface.get_preference>`"
msgstr ""
"方法 :meth:`ServerInterface.get_preference() "
"<mcdreforged.plugin.si.server_interface.ServerInterface.get_preference>`"

#: mcdreforged.command.command_source.CommandSource.preferred_language_context:1
#: of
msgid ""
"A quick helper method to use the language value in preference to create a"
" context with :meth:`RTextMCDRTranslation.language_context() "
"<mcdreforged.translation.translation_text.RTextMCDRTranslation.language_context>`"
msgstr ""
"一个快速的工具方法，使用该指令源的偏好中的语言来创建一个 "
":meth:`RTextMCDRTranslation.language_context() "
"<mcdreforged.translation.translation_text.RTextMCDRTranslation.language_context>`"
" 上下文"

#: mcdreforged.command.command_source.CommandSource.preferred_language_context:6
#: of
msgid ""
"Class "
":class:`~mcdreforged.translation.translation_text.RTextMCDRTranslation`"
msgstr "类 :class:`~mcdreforged.translation.translation_text.RTextMCDRTranslation`"

#: mcdreforged.command.builder.nodes.arguments.Enumeration:8
#: mcdreforged.command.builder.tools.Requirements:3
#: mcdreforged.command.command_source.CommandSource.preferred_language_context:8
#: of
msgid "Example usage::"
msgstr "示例用法::"

#: mcdreforged.command.command_source.CommandSource.has_permission:1 of
msgid "A helper method for testing permission requirement"
msgstr "一个用于测试权限需求的工具方法"

#: mcdreforged.command.builder.command_builder_utils.get_element
#: mcdreforged.command.builder.command_builder_utils.get_float
#: mcdreforged.command.builder.command_builder_utils.get_int
#: mcdreforged.command.builder.command_builder_utils.remove_divider_prefix
#: mcdreforged.command.builder.nodes.arguments.NumberNode.at_max
#: mcdreforged.command.builder.nodes.arguments.NumberNode.at_min
#: mcdreforged.command.builder.nodes.arguments.NumberNode.in_range
#: mcdreforged.command.builder.nodes.arguments.TextNode.at_max_length
#: mcdreforged.command.builder.nodes.arguments.TextNode.at_min_length
#: mcdreforged.command.builder.nodes.arguments.TextNode.in_length_range
#: mcdreforged.command.builder.nodes.basic.AbstractNode.on_error
#: mcdreforged.command.builder.nodes.basic.AbstractNode.print_tree
#: mcdreforged.command.builder.nodes.basic.AbstractNode.redirects
#: mcdreforged.command.builder.nodes.basic.AbstractNode.requires
#: mcdreforged.command.builder.nodes.basic.AbstractNode.runs
#: mcdreforged.command.builder.nodes.basic.AbstractNode.suggests
#: mcdreforged.command.builder.nodes.basic.AbstractNode.then
#: mcdreforged.command.builder.nodes.basic.ArgumentNode.__init__
#: mcdreforged.command.builder.tools.Requirements.argument_exists
#: mcdreforged.command.builder.tools.Requirements.has_permission
#: mcdreforged.command.builder.tools.SimpleCommandBuilder.add_children_for
#: mcdreforged.command.builder.tools.SimpleCommandBuilder.arg
#: mcdreforged.command.builder.tools.SimpleCommandBuilder.command
#: mcdreforged.command.builder.tools.SimpleCommandBuilder.literal
#: mcdreforged.command.builder.tools.SimpleCommandBuilder.print_tree
#: mcdreforged.command.builder.tools.SimpleCommandBuilder.register
#: mcdreforged.command.command_source.CommandSource.has_permission
#: mcdreforged.command.command_source.CommandSource.has_permission_higher_than
#: mcdreforged.command.command_source.CommandSource.reply of
msgid "Parameters"
msgstr "参数"

#: mcdreforged.command.command_source.CommandSource.has_permission:3
#: mcdreforged.command.command_source.CommandSource.has_permission_higher_than:3
#: of
msgid "The permission level to be tested"
msgstr "用于比较的权限等级"

#: mcdreforged.command.command_source.CommandSource.has_permission:4 of
msgid ""
"If the command source has not less permission level than the given "
"permission level"
msgstr "若指令源权限级别不低于给定的权限级别，则返回 ``True``，否则返回 ``False``"

#: mcdreforged.command.command_source.CommandSource.has_permission_higher_than:1
#: of
msgid ""
"Just like the :meth:`CommandSource.has_permission`, but this time it is a"
" greater than judgment"
msgstr "与 :meth:`CommandSource.has_permission` 相似，但指令源权限需 *高于* 给定的权限才返回 ``True``"

#: mcdreforged.command.command_source.CommandSource.has_permission_higher_than:4
#: of
msgid ""
"If the command source has greater permission level than the given "
"permission level"
msgstr "若指令源权限级别高于给定的权限级别，则返回 ``True``，否则返回 ``False``"

#: mcdreforged.command.command_source.CommandSource.reply:1 of
msgid ""
"Send a message to the command source. The message can be anything "
"including RTexts"
msgstr "发送消息到指令源。消息可以是包括 RText 对象在内的任何内容"

#: mcdreforged.command.command_source.CommandSource.reply:3 of
msgid "The message you want to send"
msgstr "你想要发送的消息"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.on_error
#: mcdreforged.command.builder.nodes.basic.ArgumentNode.__init__
#: mcdreforged.command.builder.tools.SimpleCommandBuilder.build
#: mcdreforged.command.command_source.CommandSource.reply of
msgid "Keyword Arguments"
msgstr "关键字参数"

#: mcdreforged.command.command_source.CommandSource.reply:4 of
msgid ""
"The encoding method for the message. It's only used in "
":class:`PlayerCommandSource`"
msgstr "消息的编码方式。该参数仅在 :class:`PlayerCommandSource` 中使用"

#: mcdreforged.command.command_source.CommandSource.reply:5 of
msgid "Message override when it's a :class:`ConsoleCommandSource`"
msgstr "当为 :class:`ConsoleCommandSource` 时的消息覆写"

#: mcdreforged.command.command_source.CommandSource.__eq__:3 of
msgid "All MCDR builtin command sources have the implemented the `__eq__` method"
msgstr "为所有 MCDR 内置的指令源实现了 `__eq__` 方法"

#: mcdreforged.command.command_source.InfoCommandSource:1 of
msgid ""
"Bases: :py:class:`~mcdreforged.command.command_source.CommandSource`, "
":py:class:`~abc.ABC`"
msgstr ""

#: mcdreforged.command.command_source.InfoCommandSource:1 of
msgid "Command source originated from an info created by MCDR"
msgstr "源自一个由 MCDR 创建的 info 的指令源"

#: mcdreforged.command.command_source.InfoCommandSource.get_info:1 of
msgid "Return the Info instance that this command source is created from"
msgstr "返回此指令源创建的 info 对象"

#: ../code_references/command.rst:20
msgid "Command Nodes"
msgstr "指令节点"

#: mcdreforged.command.builder.nodes.basic.AbstractNode:1 of
msgid ""
":class:`AbstractNode` is base class of all command nodes. It's also an "
"abstract class. It provides several methods for building up the command "
"tree"
msgstr ":class:`AbstractNode` 是所有指令节点的基础类。它同时也是一个抽象类。它提供了多种用于构建指令树的方法"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.then:1 of
msgid "Attach a child node to its children list, and then return itself"
msgstr "将子节点附加到其子列表中，然后返回自身"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.then:3 of
msgid "It's used for building the command tree structure"
msgstr "用于构建指令树结构"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.then:5 of
msgid "A node instance to be added to current node's children list"
msgstr "要添加到当前节点的子列表中的节点实例"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.then:7
#: mcdreforged.command.builder.tools.SimpleCommandBuilder.print_tree:3 of
msgid "Example::"
msgstr "例子::"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.runs:1 of
msgid ""
"Set the callback function of this node. When the command parsing finished"
" at this node, the callback function will be executed"
msgstr "设置节点的回调函数。在该节点上的指令解析完成后，将执行指定的回调函数"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.runs:3 of
msgid ""
"The callback function is allowed to accept 0 to 2 arguments (a "
":class:`~mcdreforged.command.command_source.CommandSource` as command "
"source and a :class:`dict` "
"(:class:`~mcdreforged.command.builder.common.CommandContext`) as "
"context). For example, the following 4 functions are available "
"callbacks::"
msgstr ""
"回调函数可以接受 0 至 2 个参数（一个 "
":class:`~mcdreforged.command.command_source.CommandSource` 作为指令源，一个 "
":class:`dict` "
"(:class:`~mcdreforged.command.builder.common.CommandContext`) "
"作为上下文）。举个例子，下面的 4 个函数均为可用的回调函数::"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.runs:23 of
msgid "Both of them can be used as the argument of the ``runs`` method"
msgstr "它们都可以用作 ``runs`` 方法的参数"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.runs:25 of
msgid ""
"This dynamic callback argument adaptation is used in all callback "
"invoking of the command nodes"
msgstr "这种动态回调参数适配在所有指令节点的回调调用中使用"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.runs:27 of
msgid ""
"A callable that accepts up to 2 arguments. Argument list: "
":class:`~mcdreforged.command.command_source.CommandSource`, :class:`dict`"
" (:class:`~mcdreforged.command.builder.common.CommandContext`)"
msgstr ""
"一个最多可接收 2 个参数的，返回一个 bool "
"的可调用对象。参数列表：:class:`~mcdreforged.command.command_source.CommandSource`、:class:`dict`"
" (:class:`~mcdreforged.command.builder.common.CommandContext`)"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.requires:1 of
msgid ""
"Set the requirement tester callback of the node. When entering this node,"
" MCDR will invoke the requirement tester to see if the current command "
"source and context match your specific condition."
msgstr "设置节点的需要的测试器回调。进入此节点时，MCDR将调用需求测试器以查看当前指令源和上下文是否符合你设定的条件"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.requires:4 of
msgid ""
"If the tester callback return True, nothing will happen, MCDR will "
"continue parsing the rest of the command"
msgstr "如果测试器返回 True，则MCDR将继续解析指令的其余部分"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.requires:6 of
msgid ""
"If the tester callback return False, a ``RequirementNotMet`` exception "
"will be risen. At this time if the *failure_message_getter* parameter is "
"available, MCDR will invoke *failure_message_getter* to get the message "
"string of the ``RequirementNotMet`` exception, otherwise a default "
"message will be used"
msgstr ""
"如果测试器返回 ``False``，则会引发 ``RequirementNotMet`` 异常。此时，如果 "
"``failure_message_getter`` 参数可用，MCDR 将调用 ``failure_message_getter`` "
"以获取消息字符串作为 RequirementNotMet 的异常消息，否则将使用默认消息"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.requires:10 of
msgid ""
"Multiple :meth:`requires` call results in an \"and\" combination of all "
"given requirements, i.e. the current command context is satisfied iif. "
"all given requirements are satisfied"
msgstr "若多次调用 :meth:`requires`，则将使用“与”逻辑合并所有需求，即仅当所有需求都被满足时测试才算通过"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.requires:14 of
msgid ""
"A callable that accepts up to 2 arguments and returns a bool. Argument "
"list: :class:`~mcdreforged.command.command_source.CommandSource`, "
":class:`dict` "
"(:class:`~mcdreforged.command.builder.common.CommandContext`)"
msgstr ""
"一个最多可接收 2 个参数的，返回一个 bool "
"的可调用对象。参数列表：:class:`~mcdreforged.command.command_source.CommandSource`、:class:`dict`"
" (:class:`~mcdreforged.command.builder.common.CommandContext`)"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.requires:16 of
msgid ""
"An optional callable that accepts up to 2 arguments and returns a str or "
"a :class:`~mcdreforged.minecraft.rtext.text.RTextBase`. Argument list: "
":class:`~mcdreforged.command.command_source.CommandSource`, :class:`dict`"
" (:class:`~mcdreforged.command.builder.common.CommandContext`)"
msgstr ""
"一个最多可接收 2 个参数的，返回一个 str 或一个 "
":class:`~mcdreforged.minecraft.rtext.text.RTextBase` "
"的可调用对象。参数列表：:class:`~mcdreforged.command.command_source.CommandSource`、:class:`dict`"
" (:class:`~mcdreforged.command.builder.common.CommandContext`)"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.requires:19 of
msgid "Example usages::"
msgstr "示例用法::"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.redirects:1 of
msgid "Redirect all further child nodes command parsing to another given node"
msgstr "将所有后续的子节点指令解析重定向到另一个给定节点"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.redirects:3 of
msgid "Redirected stuffs:"
msgstr "重定向的逻辑："

#: mcdreforged.command.builder.nodes.basic.AbstractNode.redirects:5 of
msgid "Children node traversal"
msgstr "子节点的遍历"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.redirects:6 of
msgid "Command callback, if current node doesn't have a callback"
msgstr "指令回调函数，若当前节点并不包含指令回调函数"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.redirects:8 of
msgid "Unredirected stuffs:"
msgstr "未重定向的逻辑："

#: mcdreforged.command.builder.nodes.basic.AbstractNode.redirects:10 of
msgid ""
"Command parsing, i.e. parsing the literal / argument value of the node "
"from command"
msgstr "指令解析，即从指令中解析节点的字面量 / 参数值"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.redirects:11 of
msgid "Requirement testing"
msgstr "节点需求测试"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.redirects:12 of
msgid "Suggestion fetching"
msgstr "指令建议获取"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.redirects:14 of
msgid "Example use cases:"
msgstr "用途示例："

#: mcdreforged.command.builder.nodes.basic.AbstractNode.redirects:16 of
msgid ""
"You want a short command and full-path command that will all execute the "
"same commands"
msgstr "你需要一个简短的指令和一个全路径指令来执行相同的指令"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.redirects:17 of
msgid ""
"You want to repeatedly re-enter a command node's children when parsing "
"commands"
msgstr "当解析指令时，你希望重复进入一个指令节点的子节点"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.redirects:19 of
msgid ""
"Pay attention to the difference between :meth:`redirects` and "
":meth:`then`. :meth:`redirects` is to redirect the child nodes, and "
":meth:`then` is to add a child node"
msgstr ""
"注意 :meth:`redirects` 和 :meth:`then` 之间的区别。:meth:`redirects` 是重定向子节点，而 "
":meth:`then` 是添加子节点"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.redirects:22 of
msgid "A node instance which current node is redirecting to"
msgstr "当前节点的重定向目标"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.suggests:1 of
msgid "Set the provider for command suggestions of this node"
msgstr "设置该节点的指令建议提供函数"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.suggests:3 of
msgid ":class:`Literal` node does not support this method"
msgstr "字面量节点 :class:`Literal` 不支持这个方法"

#: mcdreforged.command.builder.command_builder_utils.get_element:3
#: mcdreforged.command.builder.command_builder_utils.get_float:3
#: mcdreforged.command.builder.command_builder_utils.get_int:3
#: mcdreforged.command.builder.command_builder_utils.remove_divider_prefix:3
#: mcdreforged.command.builder.nodes.basic.AbstractNode.suggests:5
#: mcdreforged.command.builder.tools.SimpleCommandBuilder.arg:7
#: mcdreforged.command.builder.tools.SimpleCommandBuilder.command:13 of
msgid "Examples::"
msgstr "例子::"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.suggests:14 of
msgid ""
"When the user input ``!!whereis`` in the console and a space character, "
"MCDR will show the suggestions ``\"Steve\"`` and ``\"Alex\"``"
msgstr ""
"当用户在控制台中输入 ``!!whereis`` 及一个空格字符时，MCDR 将会展示包含 ``\"Steve\"`` 及 "
"``\"Alex\"`` 的输入建议"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.suggests:16 of
msgid ""
"A callable function which accepts up to 2 parameters and return an "
"iterable of str indicating the current command suggestions. Argument "
"list: :class:`~mcdreforged.command.command_source.CommandSource`, "
":class:`dict` "
"(:class:`~mcdreforged.command.builder.common.CommandContext`)"
msgstr ""
"一个最多可接收 2 个参数的，返回一个 ``Iterable[str]`` "
"的可调用对象。参数列表：:class:`~mcdreforged.command.command_source.CommandSource`、:class:`dict`"
" (:class:`~mcdreforged.command.builder.common.CommandContext`)"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.on_error:1 of
msgid ""
"When a command error occurs, the given will invoke the given handler to "
"handle with the error"
msgstr "当发生指令错误时，给定的将调用给定的处理程序以处理错误"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.on_error:3 of
msgid "A class that is subclass of :class:`CommandError`"
msgstr ":class:`CommandError` 的子类"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.on_error:4 of
msgid ""
"A callable that accepts up to 3 arguments. Argument list: "
":class:`~mcdreforged.command.builder.exception.CommandError`, "
":class:`~mcdreforged.command.command_source.CommandSource`, :class:`dict`"
" (:class:`~mcdreforged.command.builder.common.CommandContext`)"
msgstr ""
"一个最多可接收 3 "
"个参数的可调用对象。参数列表：:class:`~mcdreforged.command.builder.exception.CommandError`、:class:`~mcdreforged.command.command_source.CommandSource`、:class:`dict`"
" (:class:`~mcdreforged.command.builder.common.CommandContext`)"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.on_error:7 of
msgid ""
"If handled is set to True, "
":meth:`CommandError.set_handled<mcdreforged.command.builder.exception.CommandError.set_handled>`"
" is called automatically when invoking the handler callback"
msgstr ""
"如果将 handled 设置为 True，则在调用处理程序回调时会自动调用 "
":meth:`CommandError.set_handled<mcdreforged.command.builder.exception.CommandError.set_handled>`"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.on_child_error:1 of
msgid ""
"Similar to :meth:`on_error`, but it gets triggered only when the node "
"receives a command error from one of the node's direct or indirect child"
msgstr "与 :meth:`on_error` 类似，不过它仅在该节点收到了一个来自其子孙节点的指令错误时触发"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.print_tree:1 of
msgid "Print the command tree in a read-able format. Mostly used in debugging"
msgstr "以可读的格式打印指令树。常用于调试"

#: mcdreforged.command.builder.nodes.basic.AbstractNode.print_tree:3
#: mcdreforged.command.builder.tools.SimpleCommandBuilder.print_tree:7 of
msgid "A printer function that accepts a str"
msgstr "一个接受一个 str 的打印函数"

#: mcdreforged.command.builder.nodes.basic.Literal:1 of
msgid "Bases: :py:class:`~mcdreforged.command.builder.nodes.basic.EntryNode`"
msgstr ""

#: mcdreforged.command.builder.nodes.basic.Literal:1 of
msgid ""
"Literal node is a special node. It doesn't output any value. It's more "
"like a command branch carrier"
msgstr "字面值节点是一个特殊的节点。它不输出任何值，更像是一个指令分支的载体"

#: mcdreforged.command.builder.nodes.basic.Literal:3 of
msgid ""
"Literal node can accept a str as its literal in its constructor. A "
"literal node accepts the parsing command only when the next element of "
"the parsing command exactly matches the literal of the node"
msgstr "字面值节点可以在其构造的函数中接受 str 作为其字面值。当解析指令的下一个元素与节点的字面值完全匹配时，字面值节点才接受并解析指令"

#: mcdreforged.command.builder.nodes.basic.Literal:5 of
msgid "Literal node is the only node that can start a command execution"
msgstr "字面值节点是唯一可以发起指令执行的节点"

#: mcdreforged.command.builder.nodes.basic.ArgumentNode:1 of
msgid ""
"Bases: :py:class:`~mcdreforged.command.builder.nodes.basic.AbstractNode`,"
" :py:class:`~abc.ABC`"
msgstr ""

#: mcdreforged.command.builder.nodes.basic.ArgumentNode:1 of
msgid ""
"Argument node is an abstract base class for all nodes which store parsed "
"values"
msgstr "参数节点是一个抽象类，是所有储存解析值的节点类的基础"

#: mcdreforged.command.builder.nodes.basic.ArgumentNode:3 of
msgid ""
"It has a str field ``name`` which is used as the key used in storing "
"parsed value in context"
msgstr "它拥有着一个 str 属性 ``name``，用于作为键在上下文中储存解析的值"

#: mcdreforged.command.builder.nodes.basic.ArgumentNode.__init__:1 of
msgid ""
"The name of the argument node. Should be unique within the command tree "
"path"
msgstr "参数节点的名字。应当在指令树路径上是唯一的"

#: mcdreforged.command.builder.nodes.basic.ArgumentNode.__init__:2 of
msgid ""
"If set to True, then the parsed value will be stored in a list in the "
"command context. Re-visiting of this node appends new value to the end of"
" the list"
msgstr "若被设为 True，则解析的值将间接地储存在一个列表中。重新访问该节点会把新解析的值追加到该列表中"

#: mcdreforged.command.builder.nodes.basic.ArgumentNode.__init__:5 of
msgid "The *accumulate* parameter"
msgstr "*accumulate* 参数"

#: mcdreforged.command.builder.nodes.arguments.NumberNode:1
#: mcdreforged.command.builder.nodes.arguments.TextNode:1 of
msgid ""
"Bases: :py:class:`~mcdreforged.command.builder.nodes.basic.ArgumentNode`,"
" :py:class:`~abc.ABC`"
msgstr ""

#: mcdreforged.command.builder.nodes.arguments.NumberNode:1 of
msgid "The base class of all number related argument nodes"
msgstr "所有数字相关参数节点的基类"

#: mcdreforged.command.builder.nodes.arguments.NumberNode:3 of
msgid ""
"It's inherited by :class:`Number`, :class:`Integer` and :class:`Float`. "
"It represents a type of number based node"
msgstr "它被 :class:`Number`，:class:`Integer` 和 :class:`Float` 继承。它代表一种基于数字的节点"

#: mcdreforged.command.builder.nodes.arguments.NumberNode:5 of
msgid ""
"For a :class:`NumberNode` instance, you can restrict the range of the "
"parsed number value. If the parsed number is out of range, a "
":class:`~mcdreforged.command.builder.exception.NumberOutOfRange` "
"exception will be risen"
msgstr ""
"对于一个 :class:`NumberNode` 实例，你可以限制数字的范围。如果解析的数字超出范围，将抛出 "
":class:`~mcdreforged.command.builder.exception.NumberOutOfRange` 异常"

#: mcdreforged.command.builder.nodes.arguments.NumberNode:9 of
msgid "By default, there's no range restriction"
msgstr "默认情况下，没有范围限制"

#: mcdreforged.command.builder.nodes.arguments.NumberNode.at_min:1 of
msgid ""
"Set the lower boundary of the value range restriction. The boundary is "
"inclusive"
msgstr "设置数字范围的下限。边界值将包含于范围内"

#: mcdreforged.command.builder.nodes.arguments.NumberNode.at_min:3
#: mcdreforged.command.builder.nodes.arguments.NumberNode.in_range:9 of
msgid "the lower boundary of the range restriction"
msgstr "数字范围的下限"

#: mcdreforged.command.builder.nodes.arguments.NumberNode.at_max:1 of
msgid ""
"Set the higher boundary of the value range restriction. The boundary is "
"inclusive"
msgstr "设置数字范围的上限。边界值将包含于范围内"

#: mcdreforged.command.builder.nodes.arguments.NumberNode.at_max:3
#: mcdreforged.command.builder.nodes.arguments.NumberNode.in_range:10 of
msgid "the higher boundary of the range restriction"
msgstr "数字范围的上限"

#: mcdreforged.command.builder.nodes.arguments.NumberNode.in_range:1 of
msgid ""
"Set the lower and the higher boundary of the value range restriction at "
"the same time"
msgstr "同时设置数字范围的上限及下限"

#: mcdreforged.command.builder.nodes.arguments.NumberNode.in_range:3 of
msgid "The valid value range will be ``[min_value, max_value]``, i.e. inclusive"
msgstr "合法的数字范围将会是 ``[min_value, max_value]``。边界值将包含在内"

#: mcdreforged.command.builder.nodes.arguments.NumberNode.in_range:7 of
msgid ":meth:`at_min`, :meth:`at_max`"
msgstr ":meth:`at_min`, :meth:`at_max`"

#: mcdreforged.command.builder.nodes.arguments.Float:1
#: mcdreforged.command.builder.nodes.arguments.Integer:1
#: mcdreforged.command.builder.nodes.arguments.Number:1 of
msgid "Bases: :py:class:`~mcdreforged.command.builder.nodes.arguments.NumberNode`"
msgstr ""

#: mcdreforged.command.builder.nodes.arguments.Number:1 of
msgid "An integer, or a float"
msgstr "一个整数，或一个浮点数"

#: mcdreforged.command.builder.nodes.arguments.Number:3 of
msgid ""
"If the next element is not a number, a "
":class:`~mcdreforged.command.builder.exception.InvalidNumber` exception "
"will be risen"
msgstr ""
"如果下一个元素不是一个数字，一个 "
":class:`~mcdreforged.command.builder.exception.InvalidNumber` 异常将被抛出"

#: mcdreforged.command.builder.nodes.arguments.Integer:1 of
msgid "An integer"
msgstr "一个整数"

#: mcdreforged.command.builder.nodes.arguments.Integer:3 of
msgid ""
"If the next element is not an integer, a "
":class:`~mcdreforged.command.builder.exception.InvalidInteger` exception "
"will be risen"
msgstr ""
"如果下一个元素不是一个整数，一个 "
":class:`~mcdreforged.command.builder.exception.InvalidInteger` 异常将被抛出"

#: mcdreforged.command.builder.nodes.arguments.Float:1 of
msgid "A float"
msgstr "一个浮点数"

#: mcdreforged.command.builder.nodes.arguments.Float:3 of
msgid ""
"If the next element is not a float, a "
":class:`~mcdreforged.command.builder.exception.InvalidFloat` exception "
"will be risen"
msgstr ""
"如果下一个元素不是一个浮点数，一个 "
":class:`~mcdreforged.command.builder.exception.InvalidFloat` 异常将被抛出"

#: mcdreforged.command.builder.nodes.arguments.TextNode:1 of
msgid ""
"It's an abstract class. It's inherited by :class:`Text`, "
":class:`QuotableText` and :class:`GreedyText`. It represents a type of "
"text based node"
msgstr ""
"这是一个抽象类。它被 :class:`Text`，:class:`QuotableText` 和 :class:`GreedyText` "
"继承。它代表一种基于文本的节点"

#: mcdreforged.command.builder.nodes.arguments.TextNode:4 of
msgid ""
"For a :class:`TextNode` instance, you can restrict the length range of "
"the parsed text. If the length of the parsed text is out of range, a "
":class:`~mcdreforged.command.builder.exception.TextLengthOutOfRange` "
"exception will be risen"
msgstr ""
"对于一个 :class:`TextNode` 实例，你可以限制文本参数的长度范围。如果解析的文本长度超出范围，则将抛出 "
":class:`~mcdreforged.command.builder.exception.TextLengthOutOfRange` 异常"

#: mcdreforged.command.builder.nodes.arguments.TextNode:8 of
msgid "By default, there's no length range restriction"
msgstr "默认情况下，没有长度范围限制"

#: mcdreforged.command.builder.nodes.arguments.TextNode.at_min_length:1 of
msgid ""
"Set the lower boundary of the length range restriction. The boundary is "
"inclusive"
msgstr "设置长度范围的下限。边界值将包含于范围内"

#: mcdreforged.command.builder.nodes.arguments.TextNode.at_min_length:3
#: mcdreforged.command.builder.nodes.arguments.TextNode.in_length_range:9 of
msgid "the lower boundary of the length range restriction"
msgstr "长度范围的下限"

#: mcdreforged.command.builder.nodes.arguments.TextNode.at_max_length:1 of
msgid ""
"Set the higher boundary of the length range restriction. The boundary is "
"inclusive"
msgstr "设置长度范围的上限。边界值将包含于范围内"

#: mcdreforged.command.builder.nodes.arguments.TextNode.at_max_length:3
#: mcdreforged.command.builder.nodes.arguments.TextNode.in_length_range:10 of
msgid "the higher boundary of the length range restriction"
msgstr "长度范围的上限"

#: mcdreforged.command.builder.nodes.arguments.TextNode.in_length_range:1 of
msgid ""
"Set the lower and the higher boundary of the length range restriction at "
"the same time"
msgstr "同时设置长度范围的上限及下限"

#: mcdreforged.command.builder.nodes.arguments.TextNode.in_length_range:3 of
msgid ""
"The valid length range will be ``[min_length, max_length]``, i.e. "
"inclusive"
msgstr "合法的长度范围将会是 ``[min_length, max_length]``。边界值将包含在内"

#: mcdreforged.command.builder.nodes.arguments.TextNode.in_length_range:7 of
msgid ":meth:`at_min_length`, :meth:`at_max_length`"
msgstr ":meth:`at_min_length`, :meth:`at_max_length`"

#: mcdreforged.command.builder.nodes.arguments.GreedyText:1
#: mcdreforged.command.builder.nodes.arguments.Text:1 of
msgid "Bases: :py:class:`~mcdreforged.command.builder.nodes.arguments.TextNode`"
msgstr ""

#: mcdreforged.command.builder.nodes.arguments.Text:1 of
msgid "A text argument with no space character"
msgstr "一个不包含空格字符的文本参数"

#: mcdreforged.command.builder.nodes.arguments.Text:3 of
msgid "It will keep reading chars continuously until it meets a space character"
msgstr "它会持续读取字符，直到遇到一个空格字符"

#: mcdreforged.command.builder.nodes.arguments.QuotableText:1 of
msgid "Bases: :py:class:`~mcdreforged.command.builder.nodes.arguments.Text`"
msgstr ""

#: mcdreforged.command.builder.nodes.arguments.QuotableText:1 of
msgid "A text argument with support for inputting space characters"
msgstr "一个支持读入空格字符的文本参数"

#: mcdreforged.command.builder.nodes.arguments.QuotableText:3 of
msgid ""
"It works just like a :class:`Text` argument node, but it gives user a way"
" to input text with space character: Use two double quotes to enclose the"
" text content"
msgstr "它的工作方式与 :class:`Text` 节点一样，但是它提供了一种输入带有空格的文本的方法：使用两个双引号将文本内容括起来"

#: mcdreforged.command.builder.nodes.arguments.QuotableText:6 of
msgid ""
"If you use two double quotes to enclose the text content, You can use "
"escape character ``\\`` to escape double quotes ``\"`` and escape "
"character ``\\`` itself"
msgstr "使用双引号括住文本内容后，你可以使用转义字符 ``\\`` 来转义 ``\"`` 或 ``\\`` 本身"

#: mcdreforged.command.builder.nodes.arguments.QuotableText:9 of
msgid ""
"For example, here are some texts that are accepted by "
":class:`QuotableText`:"
msgstr "例如，以下是可被 :class:`QuotableText` 接受的一些文本："

#: mcdreforged.command.builder.nodes.arguments.QuotableText:11 of
msgid "``Something``"
msgstr "``Something``"

#: mcdreforged.command.builder.nodes.arguments.QuotableText:12 of
msgid "``\"Something with space characters\"``"
msgstr "``\"Something with space characters\"``"

#: mcdreforged.command.builder.nodes.arguments.QuotableText:13 of
msgid "``\"or escapes \\ like \" this\"``"
msgstr "``\"or escapes \\ like \" this\"``"

#: mcdreforged.command.builder.nodes.arguments.GreedyText:1 of
msgid "A text argument that consumes all remaining input"
msgstr "一个贪婪的文本参数，将接受剩余的所有输入字符串"

#: mcdreforged.command.builder.nodes.arguments.GreedyText:3 of
msgid ""
"Its principle is quite simple: It greedily takes out all remaining texts "
"in the commands"
msgstr "它的原理很简单：它贪婪地取出指令中所有剩余的文本"

#: mcdreforged.command.builder.nodes.arguments.GreedyText:5 of
msgid ""
"It's not a smart decision to append any child nodes to a "
":class:`GreedyText`, since the child nodes can never get any remaining "
"command"
msgstr "将任何子节点附加到 :class:`GreedyText` 上不是明智的决定，因为那样的话子节点将永远无法读到任何剩余指令"

#: mcdreforged.command.builder.nodes.arguments.Boolean:1
#: mcdreforged.command.builder.nodes.arguments.Enumeration:1 of
msgid "Bases: :py:class:`~mcdreforged.command.builder.nodes.basic.ArgumentNode`"
msgstr ""

#: mcdreforged.command.builder.nodes.arguments.Boolean:1 of
msgid ""
"A simple boolean argument, only accepts ``true`` and ``false``, and store"
" them as the corresponding bool value. Case is ignored"
msgstr "一个简易的布尔值参数，仅支持输入 ``true`` 或 ``false``，并将其储存为对应的 bool 值。忽略大小写"

#: mcdreforged.command.builder.nodes.arguments.Boolean:3 of
msgid ""
"Raises :class:`~mcdreforged.command.builder.exception.InvalidBoolean` if "
"the input is not accepted"
msgstr ""
"如果输入非法，抛出 :class:`~mcdreforged.command.builder.exception.InvalidBoolean` "
"异常"

#: mcdreforged.command.builder.nodes.arguments.Enumeration:1 of
msgid ""
"A node associating with an Enum class for reading an enum value of the "
"given class"
msgstr "一个与给定的枚举类（Enum）相关联的节点，用于读取枚举中类的枚举值"

#: mcdreforged.command.builder.nodes.arguments.Enumeration:3 of
msgid "An Enum class is required as the parameter to its constructor"
msgstr "枚举类本身是其构造函数所需的参数之一"

#: mcdreforged.command.builder.nodes.arguments.Enumeration:5 of
msgid ""
"Raises :class:`~mcdreforged.command.builder.exception.InvalidEnumeration`"
" if the input argument is not a valid name for the given enum class"
msgstr ""
"如果输入参数不是所提供的枚举类中的合法枚举名，抛出 "
":class:`~mcdreforged.command.builder.exception.InvalidEnumeration` 异常"

#: mcdreforged.command.builder.nodes.special.CountingLiteral:1 of
msgid "Bases: :py:class:`~mcdreforged.command.builder.nodes.basic.Literal`"
msgstr ""

#: mcdreforged.command.builder.nodes.special.CountingLiteral:1 of
msgid ""
"A special literal node with an extra ability: store how many times it got"
" visited during the command parsing in the command context"
msgstr "一个特殊的字面值节点。相比普通的字面值节点，它有一个额外的功能：在上下文中储存其在指令解析的过程中被访问的次数"

#: ../code_references/command.rst:37
msgid "Command Builder"
msgstr "指令构建器"

#: mcdreforged.command.builder.tools.SimpleCommandBuilder:1 of
msgid ""
"A tree-free command builder for easier command building. Declare & "
"Define, that's all you need"
msgstr "一个无需考虑树结构指令构造器。声明&定义，你要做的就这些"

#: mcdreforged.command.builder.tools.SimpleCommandBuilder.Error:1 of
msgid "Custom exception to be thrown in :class:`SimpleCommandBuilder`"
msgstr "在 :class:`SimpleCommandBuilder` 中使用的自定义异常"

#: mcdreforged.command.builder.tools.SimpleCommandBuilder.command:1 of
msgid "Define a command and its callback"
msgstr "定义一条指令及其回调函数"

#: mcdreforged.command.builder.tools.SimpleCommandBuilder.command:3 of
msgid ""
"A command path string is made up of several elements separated by spaces."
" These elements are the names of corresponding command node. They "
"describe a path from the root node to the target node in the command tree"
msgstr "指令路径字符串由多个由空格分隔开的元素组成，这些元素即为对应的指令节点的名字，他们描述了指令树中的一条从根节点到目标节点的路径"

#: mcdreforged.command.builder.tools.SimpleCommandBuilder.command:7 of
msgid ""
"If a node has a name surrounding with ``\"<\"`` and ``\">\"``, it will be"
" considered as an argument node, e.g. ``\"<my_arg>\"``. Otherwise it will"
" be considered as a literal node, e.g. ``\"my_literal\"``"
msgstr ""
"如果一个节点拥有一个被 ``\"<\"`` 和 ``\">\"`` 包裹住的名字，它将被视为一个参数节点，例如 "
"``\"<my_arg>\"``。否则，它将被视作一个字面量节点，如 ``\"my_literal\"``"

#: mcdreforged.command.builder.tools.SimpleCommandBuilder.command:10 of
msgid ""
"You need to give definitions of argument nodes with the :meth:`arg` "
"method. You can also define your custom literal nodes with the "
":meth:`literal` method"
msgstr "你需要使用 :meth:`arg` 方法来给出参数节点的定义。你也可以使用 :meth:`literal` 方法来给出自定义字面量节点的定义"

#: mcdreforged.command.builder.tools.SimpleCommandBuilder.command:19 of
msgid ""
"Alternative, you can use this method as a decorator to decorate the "
"callback function by passing the first argument::"
msgstr "除此之外，你还可以把此方法用作一个装饰器，来装饰指令回调函数。只需仅传入第一个参数即可："

#: mcdreforged.command.builder.tools.SimpleCommandBuilder.command:32 of
msgid "A command path string, e.g. ``\"!!calc add <value_a> <value_b>\"``"
msgstr "一个指令路径字符串，如 ``\"!!calc add <value_a> <value_b>\"``"

#: mcdreforged.command.builder.tools.SimpleCommandBuilder.command:33 of
msgid ""
"The callback function of this command, which will be passed to "
":meth:`AbstractNode.then<mcdreforged.command.builder.nodes.basic.AbstractNode.then>`"
msgstr ""
"本条指令的回调函数，将被传递给 "
":meth:`AbstractNode.then<mcdreforged.command.builder.nodes.basic.AbstractNode.then>`"
" 方法"

#: mcdreforged.command.builder.tools.SimpleCommandBuilder.command:35 of
msgid "It can now be used as a decorator for callback functions"
msgstr "现在它可以用作一个装饰回调函数的装饰器了"

#: mcdreforged.command.builder.tools.SimpleCommandBuilder.arg:1 of
msgid ""
"Define an argument node for an argument name. All argument names appeared"
" in :meth:`command` must be defined"
msgstr "为一个参数名字定义参数节点。所有在 :meth:`command` 出现的参数名字均需要被定义"

#: mcdreforged.command.builder.tools.SimpleCommandBuilder.arg:3 of
msgid ""
"Notes that almost all MCDR builtin argument node classes can be "
"constructed with 1 argument name parameter (e.g. "
":class:`~mcdreforged.command.builder.nodes.arguments.Text`, "
":class:`~mcdreforged.command.builder.nodes.arguments.Number`), so you can"
" just use the name of the argument class here"
msgstr ""
"注意到几乎所有的 MCDR 内置参数节点均可使用 1 个参数名参数来构造（如 "
":class:`~mcdreforged.command.builder.nodes.arguments.Text`、:class:`~mcdreforged.command.builder.nodes.arguments.Number`），因此你可以直接在这里填入参数节点的类名"

#: mcdreforged.command.builder.tools.SimpleCommandBuilder.arg:12 of
msgid ""
"The name of the argument node. It can be quoted with ``\"<>\"`` if you "
"want. Examples: ``\"my_arg\"``, ``\"<my_arg>\"``"
msgstr "参数节点的名称。可选地，它可以被 ``\"<>\"`` 括住。例子：``\"my_arg\"``、``\"<my_arg>\"``"

#: mcdreforged.command.builder.tools.SimpleCommandBuilder.arg:13 of
msgid ""
"An argument node constructor, that accepts the argument name as the only "
"parameter and return an "
":class:`~mcdreforged.command.builder.nodes.basic.ArgumentNode` object"
msgstr ""
"一个参数节点的构造函数，接受参数节点名字作为其唯一一个参数，返回一个 "
":class:`~mcdreforged.command.builder.nodes.basic.ArgumentNode` 实例"

#: mcdreforged.command.builder.tools.SimpleCommandBuilder.arg:15 of
msgid ""
"A :class:`NodeDefinition` object. With that you can further customize "
"this node definition"
msgstr "一个 :class:`NodeDefinition` 对象。借助它，你可以进一步的自定义这个节点定义"

#: mcdreforged.command.builder.tools.SimpleCommandBuilder.literal:1 of
msgid ""
"Define a literal node for a literal name. It's useful when you want to "
"have some custom literal nodes. If you just want a regular literal node, "
"you don't need to invoke this method, since the builder will use the "
"default :class:`~mcdreforged.command.builder.nodes.basic.Literal` "
"constructor for node construction"
msgstr ""
"为一个字面量名字定义一个字面量节点。如果你想要一些拥有自定义功能的字面量节点它将会很有用。如果你仅仅一个普通的字面量节点，你无需调用这个方法来给出定义，因为本构建器会使用默认的"
" :class:`~mcdreforged.command.builder.nodes.basic.Literal` 构造函数来构造字面量节点"

#: mcdreforged.command.builder.tools.SimpleCommandBuilder.literal:5 of
msgid "The name of the literal node"
msgstr "字面量节点的名字"

#: mcdreforged.command.builder.tools.SimpleCommandBuilder.literal:6 of
msgid ""
"A literal node constructor, that accepts the literal name as the only "
"parameter and return a "
":class:`~mcdreforged.command.builder.nodes.basic.Literal` object. "
"Optional"
msgstr ""
"一个字面量节点的构造函数，接受字面量节点名字作为其唯一一个参数，返回一个 "
":class:`~mcdreforged.command.builder.nodes.basic.Literal` 实例。参数为可选参数"

#: mcdreforged.command.builder.tools.SimpleCommandBuilder.literal:8 of
msgid ""
"A :class:`NodeDefinitionImpl` object. With that you can further customize"
" this node definition"
msgstr "一个 :class:`NodeDefinition` 对象。借助它，你可以进一步的自定义这个节点定义"

#: mcdreforged.command.builder.tools.SimpleCommandBuilder.build:1 of
msgid "Build the command trees"
msgstr "构建指令树"

#: mcdreforged.command.builder.tools.SimpleCommandBuilder.build:3 of
msgid ""
"Nodes with same name will be reused. e.g. if you define 3 commands with "
"path ``\"!!foo\"``, ``\"!!foo bar\"`` and \"``!!foo baz\"``, the root "
"``\"!!foo\"`` node will be reused, and there will be only 1 ``\"!!foo\"``"
" node eventually"
msgstr ""
"拥有相同名字的节点将被复用。比如，如果你定义了 3 个指令了，指令路径分别为 ``\"!!foo\"``、``\"!!foo bar\"`` 和 "
"\"``!!foo baz\"``，那么根节点 ``\"!!foo\"`` 将被复用，最后将会只有一个 ``\"!!foo\"`` 节点"

#: mcdreforged.command.builder.tools.SimpleCommandBuilder.build:6 of
msgid "If set to false, do not use cache and always build new command trees"
msgstr "若设为 false，不使用结果缓存，总是构建新的指令树"

#: mcdreforged.command.builder.tools.SimpleCommandBuilder.build:7 of
msgid ""
"A list of the built command tree root nodes. The result is cached until "
"you instruct the builder again. You can use :meth:`clean_cache` to "
"explicitly clean the build cache"
msgstr ""
"一个列表，储存着构建完成的指令树的根节点。构建结果将被缓存，直到你再次操作这个指令构建器。借助 "
":meth:`clean_cache`，你可以主动地清空构建结果缓存"

#: mcdreforged.command.builder.tools.SimpleCommandBuilder.add_children_for
#: mcdreforged.command.builder.tools.SimpleCommandBuilder.build
#: mcdreforged.command.builder.tools.SimpleCommandBuilder.print_tree
#: mcdreforged.command.builder.tools.SimpleCommandBuilder.register of
msgid "Raises"
msgstr "抛出"

#: mcdreforged.command.builder.tools.SimpleCommandBuilder.build:9 of
msgid "if there are undefined argument nodes"
msgstr "如果存在未定义的参数节点"

#: mcdreforged.command.builder.tools.SimpleCommandBuilder.build:11 of
msgid "Added ``use_cache`` keyword argument"
msgstr "添加 ``use_cache`` 关键字参数"

#: mcdreforged.command.builder.tools.SimpleCommandBuilder.clean_cache:1 of
msgid "Clean the build cache"
msgstr "清空构建结果缓存"

#: mcdreforged.command.builder.tools.SimpleCommandBuilder.clean_cache:3 of
msgid "See method :meth:`build`"
msgstr "见方法 :meth:`build`"

#: mcdreforged.command.builder.tools.SimpleCommandBuilder.register:1 of
msgid ""
"A helper method for lazyman, to build with method :meth:`build` and "
"register built commands to the MCDR server"
msgstr "一个为懒人提供的工具方法，使用方法 :meth:`build` 构建指令树，并将构建结果向 MCDR 注册"

#: mcdreforged.command.builder.tools.SimpleCommandBuilder.register:3 of
msgid ""
"The "
":class:`~mcdreforged.plugin.si.plugin_server_interface.PluginServerInterface`"
" object of your plugin"
msgstr ""
"你的插件的 "
":class:`~mcdreforged.plugin.si.plugin_server_interface.PluginServerInterface`"
" 实例"

#: mcdreforged.command.builder.tools.SimpleCommandBuilder.register:4 of
msgid "if build fails, or there are rooted non-literal nodes in the build result"
msgstr "如果构建失败，或者构建结果中存在非字面量的根节点"

#: mcdreforged.command.builder.tools.SimpleCommandBuilder.add_children_for:1 of
msgid ""
"A helper method for lazyman, to build command trees with method "
":meth:`build` and attach all built tree nodes as the children of the "
"given node via "
":meth:`~mcdreforged.command.builder.nodes.basic.AbstractNode.then`"
msgstr ""
"一个为懒人提供的工具方法，使用方法 :meth:`build` 构建指令树，随后借助 "
":meth:`~mcdreforged.command.builder.nodes.basic.AbstractNode.then` "
"方法，将构建结果添加为给定指令节点的子节点"

#: mcdreforged.command.builder.tools.SimpleCommandBuilder.add_children_for:4 of
msgid "The command node that will become the parent of the built children nodes"
msgstr "将作为构建结果节点的父亲的指令节点"

#: mcdreforged.command.builder.tools.SimpleCommandBuilder.add_children_for:5
#: mcdreforged.command.builder.tools.SimpleCommandBuilder.print_tree:8 of
msgid "if build fails"
msgstr "若构建失败"

#: mcdreforged.command.builder.tools.SimpleCommandBuilder.print_tree:1 of
msgid ""
"A helper method for lazyman, to build with method :meth:`build` and print"
" the built command trees"
msgstr "一个为懒人提供的工具方法，使用方法 :meth:`build` 构建指令树，并将指令树打印出来"

#: mcdreforged.command.builder.tools.NodeDefinition:1 of
msgid "A node definition class holding extra customization information"
msgstr "一个储存着额外的自定义信息的节点定义类"

#: mcdreforged.command.builder.tools.NodeDefinition.post_process:1 of
msgid "Add a post-process function to the current node definition"
msgstr "为当前节点定义增加一个后续处理函数"

#: mcdreforged.command.builder.tools.NodeDefinition.post_process:3 of
msgid ""
"During method :meth:`SimpleCommandBuilder.build`, after a node is "
"constructed, all the post-process functions will be applied to the node "
"object"
msgstr "在 :meth:`SimpleCommandBuilder.build` 中，当一个节点被构造后，所有的后续处理函数将被作用于这个节点对象上"

#: mcdreforged.command.builder.tools.NodeDefinition.requires:1 of
msgid ""
"See :meth:`AbstractNode.requires() "
"<mcdreforged.command.builder.nodes.basic.AbstractNode.requires>`"
msgstr ""
"见 :meth:`AbstractNode.requires() "
"<mcdreforged.command.builder.nodes.basic.AbstractNode.requires>`"

#: mcdreforged.command.builder.tools.NodeDefinition.suggests:1 of
msgid ""
"See :meth:`AbstractNode.suggests() "
"<mcdreforged.command.builder.nodes.basic.AbstractNode.suggests>`"
msgstr ""
"见 :meth:`AbstractNode.suggests() "
"<mcdreforged.command.builder.nodes.basic.AbstractNode.suggests>`"

#: mcdreforged.command.builder.tools.NodeDefinition.on_error:1 of
msgid ""
"See :meth:`AbstractNode.on_error() "
"<mcdreforged.command.builder.nodes.basic.AbstractNode.on_error>`"
msgstr ""
"见 :meth:`AbstractNode.on_error() "
"<mcdreforged.command.builder.nodes.basic.AbstractNode.on_error>`"

#: mcdreforged.command.builder.tools.NodeDefinition.on_child_error:1 of
msgid ""
"See :meth:`AbstractNode.on_child_error() "
"<mcdreforged.command.builder.nodes.basic.AbstractNode.on_child_error>`"
msgstr ""
"见 :meth:`AbstractNode.on_child_error() "
"<mcdreforged.command.builder.nodes.basic.AbstractNode.on_child_error>`"

#: ../code_references/command.rst:47
msgid "Tools"
msgstr "工具"

#: mcdreforged.command.builder.tools.Requirements:1 of
msgid "A common callback function factory for command node requirement testing"
msgstr "一些常用的，用于指令节点需求测试的回调函数工厂"

#: mcdreforged.command.builder.tools.Requirements:9 of
msgid ""
"Method :meth:`AbstractNode.requires() "
"<mcdreforged.command.builder.nodes.basic.AbstractNode.requires>`, method "
":meth:`NodeDefinition.requires() "
"<mcdreforged.command.builder.tools.NodeDefinition.requires>`"
msgstr ""
"方法 :meth:`AbstractNode.requires() "
"<mcdreforged.command.builder.nodes.basic.AbstractNode.requires>`、方法 "
":meth:`NodeDefinition.requires() "
"<mcdreforged.command.builder.tools.NodeDefinition.requires>`"

#: mcdreforged.command.builder.tools.Requirements.has_permission:1 of
msgid "Check if the command source has the given permission level"
msgstr "检查指令源是否拥有给定的权限等级"

#: mcdreforged.command.builder.tools.Requirements.has_permission:3 of
msgid "The minimum accepted permission level"
msgstr "最小的可被接受的权限等级"

#: mcdreforged.command.builder.tools.Requirements.is_player:1 of
msgid "Check if the command source indicates a player"
msgstr "检查指令源是否为玩家"

#: mcdreforged.command.builder.tools.Requirements.is_console:1 of
msgid "Check if the command source indicates the console"
msgstr "检查指令源是否为控制台"

#: mcdreforged.command.builder.tools.Requirements.argument_exists:1 of
msgid "Check if the given argument has been assigned in current command context"
msgstr "检查给定的参数是否在当前的指令上下文中已被赋值"

#: mcdreforged.command.builder.tools.Requirements.argument_exists:3 of
msgid "The name of the argument to be checked"
msgstr "将要检查的参数的名称"

#: ../code_references/command.rst:53
msgid "Exceptions"
msgstr "异常"

#: mcdreforged.command.builder.exception.CommandErrorBase:1 of
msgid "Bases: :py:class:`Exception`, :py:class:`~abc.ABC`"
msgstr ""

#: mcdreforged.command.builder.exception.CommandErrorBase:1 of
msgid "The base exception class for all command related errors"
msgstr "所有指令相关错误的异常基类"

#: mcdreforged.command.builder.exception.IllegalNodeOperation:1 of
msgid "Bases: :py:class:`~mcdreforged.command.builder.exception.CommandErrorBase`"
msgstr ""

#: mcdreforged.command.builder.exception.IllegalNodeOperation:1 of
msgid "The operation is unsupported by this node"
msgstr "该节点不支持此操作"

#: mcdreforged.command.builder.exception.CommandError:1 of
msgid ""
"Bases: "
":py:class:`~mcdreforged.command.builder.exception.CommandErrorBase`, "
":py:class:`~abc.ABC`"
msgstr ""

#: mcdreforged.command.builder.exception.CommandError:1 of
msgid "The basic exception, for errors raised when parsing a command"
msgstr "解析指令出错时抛出的异常基类"

#: mcdreforged.command.builder.exception.CommandError.get_error_data:1 of
msgid "Data that might be helpful for error report"
msgstr "有助于生成错误报告的数据"

#: mcdreforged.command.builder.exception.CommandError.get_error_data:3 of
msgid "It will be used in error message str formatting"
msgstr "它将被用于错误信息的字符串 ``format`` 操作"

#: mcdreforged.command.builder.exception.CommandError.get_parsed_command:1 of
msgid "A prefix of the input command that has been successfully parsed"
msgstr "成功解析的输入指令的前缀字符串"

#: mcdreforged.command.builder.exception.CommandError.get_failed_command:1 of
msgid "A prefix of the input command that is parsing when the failure occurs"
msgstr "解析出错时输入指令的前缀字符串"

#: mcdreforged.command.builder.exception.CommandError.get_error_segment:1 of
msgid "The command segment that causes the error"
msgstr "造成错误的指令片段"

#: mcdreforged.command.builder.exception.CommandError.set_handled:1 of
msgid ""
"When handling the command error by error listener on the command tree "
"node, you can use this method to tell MCDR the command error has been "
"handled so MCDR will not display the default command failure message to "
"the command source like ``Unknown argument: !!MCDR reload this<--``"
msgstr ""
"当你在指令树节点上使用 error listener 来处理指令错误时，你可以调用这个方法来告诉 MCDR 这个错误已经被处理了，因此 MCDR "
"将不会回复指令源默认的指令错误信息，如 ``未知参数: !!MCDR reload this<--``"

#: mcdreforged.command.builder.exception.CommandError.set_handled:4 of
msgid ""
"It won't make any difference to the command node tree execution, but it "
"might be useful for outer error handlers"
msgstr "这不会影响指令树的错误处理逻辑，不过它对外层的逻辑有用"

#: mcdreforged.command.builder.exception.RequirementNotMet:1
#: mcdreforged.command.builder.exception.UnknownArgument:1
#: mcdreforged.command.builder.exception.UnknownCommand:1 of
msgid "Bases: :py:class:`~mcdreforged.command.builder.exception.CommandError`"
msgstr ""

#: mcdreforged.command.builder.exception.UnknownCommand:1 of
msgid ""
"When the command finishes parsing, but current node doesn't have a "
"command callback function"
msgstr "指令解析完全，但当前节点并不包含指令回调函数"

#: mcdreforged.command.builder.exception.UnknownArgument:1 of
msgid ""
"When there's remaining command string, but there's no matched children "
"command nodes"
msgstr "指令字符串仍有剩余，但已经没有匹配的子指令节点了"

#: mcdreforged.command.builder.exception.RequirementNotMet:1 of
msgid ""
"The specified requirement for the command source to enter this node is "
"not met"
msgstr "指令源进入本节点所需的需求未被满足"

#: mcdreforged.command.builder.exception.CommandSyntaxError:1 of
msgid ""
"Bases: :py:class:`~mcdreforged.command.builder.exception.CommandError`, "
":py:class:`~abc.ABC`"
msgstr ""

#: mcdreforged.command.builder.exception.CommandSyntaxError:1 of
msgid "The basic exception for command parsing error"
msgstr "指令解析出错的异常基类"

#: mcdreforged.command.builder.exception.IllegalArgument:1 of
msgid ""
"Bases: "
":py:class:`~mcdreforged.command.builder.exception.CommandSyntaxError`, "
":py:class:`~abc.ABC`"
msgstr ""

#: mcdreforged.command.builder.exception.IllegalArgument:1 of
msgid ""
"The basic exception for argument parsing error, usually caused by wrong "
"argument syntax"
msgstr "参数节点解析出错的异常基类，通常由错误的参数语法导致"

#: mcdreforged.command.builder.exception.AbstractOutOfRange:1 of
msgid ""
"Bases: "
":py:class:`~mcdreforged.command.builder.exception.IllegalArgument`, "
":py:class:`~abc.ABC`"
msgstr ""

#: mcdreforged.command.builder.exception.AbstractOutOfRange:1 of
msgid "The basic exception for out-of-range like argument parsing error"
msgstr "超出范围相关错误的异常基类"

#: mcdreforged.command.builder.exception.NumberOutOfRange:1
#: mcdreforged.command.builder.exception.TextLengthOutOfRange:1 of
msgid ""
"Bases: "
":py:class:`~mcdreforged.command.builder.exception.AbstractOutOfRange`"
msgstr ""

#: mcdreforged.command.builder.exception.NumberOutOfRange:1 of
msgid "The parsed number value is out of the restriction range"
msgstr "解析出的数值超出了限制范围"

#: mcdreforged.command.builder.exception.EmptyText:1
#: mcdreforged.command.builder.exception.IllegalEscapesUsage:1
#: mcdreforged.command.builder.exception.InvalidBoolean:1
#: mcdreforged.command.builder.exception.InvalidEnumeration:1
#: mcdreforged.command.builder.exception.InvalidFloat:1
#: mcdreforged.command.builder.exception.InvalidInteger:1
#: mcdreforged.command.builder.exception.InvalidNumber:1
#: mcdreforged.command.builder.exception.UnclosedQuotedString:1 of
msgid "Bases: :py:class:`~mcdreforged.command.builder.exception.IllegalArgument`"
msgstr ""

#: mcdreforged.command.builder.exception.InvalidNumber:1 of
msgid "The parsed value is not a valid number"
msgstr "解析结果不是一个合法的数字"

#: mcdreforged.command.builder.exception.InvalidInteger:1 of
msgid "The parsed value is not a valid integer"
msgstr "解析结果不是一个合法的整数"

#: mcdreforged.command.builder.exception.InvalidFloat:1 of
msgid "The parsed value is not a valid float"
msgstr "解析结果不是一个合法的浮点数"

#: mcdreforged.command.builder.exception.TextLengthOutOfRange:1 of
msgid "The length of the given text is out of the restriction range"
msgstr "文本长度超出了限制范围"

#: mcdreforged.command.builder.exception.IllegalEscapesUsage:1 of
msgid "The text contains illegal ``\\`` usage"
msgstr "文本包含了非法的转义符 ``\\`` 用法"

#: mcdreforged.command.builder.exception.UnclosedQuotedString:1 of
msgid "The quote is unclosed"
msgstr "双引号未闭合"

#: mcdreforged.command.builder.exception.EmptyText:1 of
msgid "The text is empty, which is not allowed"
msgstr "文本为空，但不允许为空"

#: mcdreforged.command.builder.exception.InvalidBoolean:1 of
msgid "The parsed value is not a valid boolean"
msgstr "解析结果不是一个合法的布尔值"

#: mcdreforged.command.builder.exception.InvalidEnumeration:1 of
msgid "The parsed value is not a valid Enum"
msgstr "解析结果不是一个合法的枚举值"

#: ../code_references/command.rst:60
msgid "Misc"
msgstr "杂项"

#: mcdreforged.command.builder.common.CommandContext:1 of
msgid "Bases: :py:class:`~typing.Dict`\\ [:py:class:`str`, :py:obj:`~typing.Any`]"
msgstr ""

#: mcdreforged.command.builder.common.CommandContext:1 of
msgid ""
"A :class:`CommandContext` stores the information of the command parsing "
"process. It's a class inherited from dict"
msgstr ":class:`CommandContext` 储存着当前指令解析过程中的信息。它是一个继承自 dict 的类"

#: mcdreforged.command.builder.common.CommandContext:3 of
msgid ""
"The most common use case for :class:`CommandContext` is storing the "
"parsed result from :class:`argument "
"nodes<mcdreforged.command.builder.nodes.basic.ArgumentNode>`. The name of"
" the argument node and the parsed result will be stored as a key-value "
"pair in :class:`CommandContext`, which means you can use dict method like"
" ``context['arg_name']`` to access these argument values"
msgstr ""
":class:`CommandContext` 最常见的用法是储存 "
":class:`参数节点<mcdreforged.command.builder.nodes.basic.ArgumentNode>` "
"解析出的结果。参数节点的名字以及解析结果将作为键值对储存于 :class:`CommandContext` 中，这意味着你可以使用 dict "
"的方法，如 ``context['arg_name']``，来访问这些参数值"

#: mcdreforged.command.builder.common.CommandContext:8 of
msgid ""
":class:`CommandContext` also provides some other useful methods for "
"getting information of the current command context"
msgstr ":class:`CommandContext` 还提供了其他有用的，可用于获取当前指令上下文的方法"

#: mcdreforged.command.builder.common.CommandContext.source:1 of
msgid "The command source that triggered the current command parsing"
msgstr "触发当前指令解析的指令源"

#: mcdreforged.command.builder.common.CommandContext.command:1 of
msgid "The complete command string being parsing"
msgstr "完整的指令字符串"

#: mcdreforged.command.builder.common.CommandContext.command_read:1 of
msgid "The already-parsed command"
msgstr "已经解析的指令"

#: mcdreforged.command.builder.common.CommandContext.command_remaining:1 of
msgid "The to-be-parsed command, i.e. the remaining command"
msgstr "将被解析的指令，即剩余为被解析的指令"

#: mcdreforged.command.builder.common.CommandContext.cursor:1 of
msgid ""
"The index of the complete command str, the cursor of the command parsing "
"process"
msgstr "完整的指令字符串的下标，即当前指令解析的指针"

#: mcdreforged.command.builder.common.CommandContext.node_path:1 of
msgid ""
"The path from the root node of the command tree to the current command "
"node"
msgstr "从指令树的根节点到当前节点的路径"

#: ../../docstring mcdreforged.command.builder.command_builder_utils.DIVIDER:1
#: of
msgid "The char to divide elements in a command string —— space"
msgstr "在指令字符串中用于分割元素的分隔符——空格"

#: mcdreforged.command.builder.command_builder_utils.remove_divider_prefix:1 of
msgid ""
"Remove the element divider prefix of the given text. It's usually used "
"before taking the next element in the command str"
msgstr "移除给定文本的分隔符前缀。它通常于获取指令字符串的下一个元素时使用"

#: mcdreforged.command.builder.command_builder_utils.remove_divider_prefix:10
#: of
msgid "The text for divider prefix removal"
msgstr "将被移除分隔符前缀的文本"

#: mcdreforged.command.builder.command_builder_utils.get_element:1 of
msgid "Get an element from the remaining input"
msgstr "从剩余的输入字符串中获取一个元素"

#: mcdreforged.command.builder.command_builder_utils.get_element:14
#: mcdreforged.command.builder.command_builder_utils.get_float:12
#: mcdreforged.command.builder.command_builder_utils.get_int:12 of
msgid "The remaining input to be parsed. It should not start with :data:`DIVIDER`"
msgstr "将被解析的剩余输入串。它不应以 :data:`DIVIDER` 为前缀"

#: mcdreforged.command.builder.command_builder_utils.get_int:1 of
msgid "Get an int from the remaining input"
msgstr "从剩余的输入字符串中获取一个 int"

#: mcdreforged.command.builder.command_builder_utils.get_float:13
#: mcdreforged.command.builder.command_builder_utils.get_int:13 of
msgid "a tuple of value, char_read. The value will be None if parsing failed"
msgstr "一个储存着 (值, 读取字符个数) 的元组。如果解析失败，值将会为 None"

#: mcdreforged.command.builder.command_builder_utils.get_float:1 of
msgid "Get a float from the remaining input"
msgstr "从剩余的输入字符串中获取一个 float"

#: ../code_references/command.rst:74
msgid ""
"Renamed ``command_builder_util`` to ``command_builder_utils``. The old "
"name is still accessible from ``mcdreforged.api.command``"
msgstr ""
"``command_builder_util`` 被重命名为 ``command_builder_utils``。旧名字仍可从 "
"``mcdreforged.api.command`` 中访问"

